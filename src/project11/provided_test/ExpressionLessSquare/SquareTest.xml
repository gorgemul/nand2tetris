<class>
  <keyword> class </keyword>
  <class-dec> Square </class-dec>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <field-0-dec> x </field-0-dec>
    <symbol> , </symbol>
    <field-1-dec> y </field-1-dec>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <field-2-dec> size </field-2-dec>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <class-used> Square </class-used>
    <subroutine-dec> new </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <argument-0-dec> Ax </argument-0-dec>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argument-1-dec> Ay </argument-1-dec>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <argument-2-dec> Asize </argument-2-dec>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <field-0-used> x </field-0-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <argument-0-used> Ax </argument-0-used>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <field-1-used> y </field-1-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <argument-1-used> Ay </argument-1-used>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <field-2-used> size </field-2-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <argument-2-used> Asize </argument-2-used>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <subroutine-used> draw </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <field-0-used> x </field-0-used>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> dispose </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Memory </class-used>
          <symbol> . </symbol>
          <subroutine-used> deAlloc </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> draw </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Screen </class-used>
          <symbol> . </symbol>
          <subroutine-used> setColor </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Screen </class-used>
          <symbol> . </symbol>
          <subroutine-used> drawRectangle </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-1-used> y </field-1-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-1-used> y </field-1-used>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> erase </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Screen </class-used>
          <symbol> . </symbol>
          <subroutine-used> setColor </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Screen </class-used>
          <symbol> . </symbol>
          <subroutine-used> drawRectangle </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-1-used> y </field-1-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-0-used> x </field-0-used>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <field-1-used> y </field-1-used>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> incSize </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-0-used> x </field-0-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutine-used> erase </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-2-used> size </field-2-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-2-used> size </field-2-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutine-used> draw </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> decSize </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-2-used> size </field-2-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <subroutine-used> erase </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-2-used> size </field-2-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-2-used> size </field-2-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <subroutine-used> draw </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> moveUp </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-1-used> y </field-1-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-1-used> y </field-1-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-1-used> y </field-1-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> moveDown </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-1-used> y </field-1-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-1-used> y </field-1-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-1-used> y </field-1-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> moveLeft </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-0-used> x </field-0-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-0-used> x </field-0-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-0-used> x </field-0-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <subroutine-dec> moveRight </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <field-0-used> x </field-0-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <field-0-used> x </field-0-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <field-0-used> x </field-0-used>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> setColor </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <class-used> Screen </class-used>
              <symbol> . </symbol>
              <subroutine-used> drawRectangle </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-0-used> x </field-0-used>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <field-1-used> y </field-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>