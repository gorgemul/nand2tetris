<class>
  <keyword> class </keyword>
  <class-dec> Main </class-dec>
  <symbol> { </symbol>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <subroutine-dec> main </subroutine-dec>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <class-used> Array </class-used>
        <var-0-dec> a </var-0-dec>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <var-1-dec> length </var-1-dec>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <var-2-dec> i </var-2-dec>
        <symbol> , </symbol>
        <var-3-dec> sum </var-3-dec>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <var-1-used> length </var-1-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <class-used> Keyboard </class-used>
              <symbol> . </symbol>
              <subroutine-used> readInt </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> HOW MANY NUMBERS?  </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <var-0-used> a </var-0-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <class-used> Array </class-used>
              <symbol> . </symbol>
              <subroutine-used> new </subroutine-used>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <var-1-used> length </var-1-used>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <var-2-used> i </var-2-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <var-2-used> i </var-2-used>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <var-1-used> length </var-1-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <var-0-used> a </var-0-used>
              <symbol> [ </symbol>
              <expression>
                <term>
                  <var-2-used> i </var-2-used>
                </term>
              </expression>
              <symbol> ] </symbol>
              <symbol> = </symbol>
              <expression>
                <term>
                  <class-used> Keyboard </class-used>
                  <symbol> . </symbol>
                  <subroutine-used> readInt </subroutine-used>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <stringConstant> ENTER THE NEXT NUMBER:  </stringConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <var-2-used> i </var-2-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <var-2-used> i </var-2-used>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <letStatement>
          <keyword> let </keyword>
          <var-2-used> i </var-2-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <var-3-used> sum </var-3-used>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <var-2-used> i </var-2-used>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <var-1-used> length </var-1-used>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <var-3-used> sum </var-3-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <var-3-used> sum </var-3-used>
                </term>
                <symbol> + </symbol>
                <term>
                  <var-0-used> a </var-0-used>
                  <symbol> [ </symbol>
                  <expression>
                    <term>
                      <var-2-used> i </var-2-used>
                    </term>
                  </expression>
                  <symbol> ] </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <var-2-used> i </var-2-used>
              <symbol> = </symbol>
              <expression>
                <term>
                  <var-2-used> i </var-2-used>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Output </class-used>
          <symbol> . </symbol>
          <subroutine-used> printString </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> THE AVERAGE IS:  </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Output </class-used>
          <symbol> . </symbol>
          <subroutine-used> printInt </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <var-3-used> sum </var-3-used>
              </term>
              <symbol> / </symbol>
              <term>
                <var-1-used> length </var-1-used>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <class-used> Output </class-used>
          <symbol> . </symbol>
          <subroutine-used> println </subroutine-used>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>